Declaring a variable:
let x: string;
let <name>: <type>

Declaring and initializing a variable:
let v: string = x
let <name>: <type> = <value>

Setting the value of a variable:
v = x
<name> = <value>

Declaring and initializing an array:
let x: []string = []
let <name>: []<type> = <array literal>

Conditions:
if a > 5 {

}
if <condition> {}

count loop:
for let i: int = 0; i < 10; i++ {}
for <declaration>;<condition>;<action> {}

foreach loop:
foreach index, element in list {}
foreach <name1>, <name2> in <name3> {}

function definition:
func myfunc(a: string, b: int) => (int, string) {}
func <name>(<p1>: <type>, <p2>: <type>) => (<type>, <type>) {}

Arithmetic Operators:
+  = simple addition
-  = simple subtraction
*  = simple multiplication
** = exponentation operator
/  = division 
%  = modulo

Comparison Operators:
>  = bigger than
<  = smaller than
>= = bigger or equal
<= = smaller or equal
== = exactly equal

Logical Operators:
&& = logical and
|| = logical or
!  = inversion

Bitwise Operators:
&  = bitwise and
|  = bitwise or
>> = rshift
<< = lshift
^  = XOR
~  = invert

Preprocessor Macros:
a += b >> a = a + b 
a -= b >> a = a - b
a *= b >> a = a * b
a /= b >> a = a / b
a &= b >> a = a & b
a |= b >> a = a | b
a ^= b >> a = a ^ b
a++    >> a = a + 1
a--    >> a = a - 1


List of Basic Types:
i8, i16, i32, i64
u8, u16, u32, u64
string, char
byte
f32, f64
any

Composable Types:

List<T Any>
    Uniformely typed dynamic sized array.
    Type of elements can be inferred from the inserted element type when initializing a non-empty list.
    For Example: let myList: List = ["a","b","c"] automatically infers the element type to be string
    When using untyped integer constants the assumed type will be i64, for floats it will be f64.

    Operators:
    The plus operator has the following overloads for the list datatype:
    List<T> = List<T> + T = append the element to the list
    List<T> = List<T> + List<T> = append both lists togehter
    List<T> = List<T> + Vector<T> = append all dimensions of the vector to the list

Vector<T Numeric>
    Type alias for list that only accepts numeric element types and has different overloads.

    Operators:
    Vector<T> = Vector<T> + Vector<T> = adds all dimensions of the vectors
    Vector<T> = Vector<T> - Vector<T> = subtracts all dimensions of the vectors
    Vector<T> = Vector<T> * Vector<T> = multiplies all dimensions of the vectors
    Vector<T> = Vector<T> / Vector<T> = divides all dimensions of the vectors
    Vector<T> = Vector<T> + T = adds the constant to all dimensions of the vector
    Vector<T> = Vector<T> - T = subtracts the constant from all dimensions of the vector
    Vector<T> = Vector<T> * T = multiplies all dimensions of the vector with the constant
    Vector<T> = Vector<T> / T = divides all dimensions of the vector by the constant

Tensor<T Numeric>
    Type alias for multidimensional lists with numeric element types that has additional overloads

    Tensor[N]<T> = Tensor[N]<T> + Tensor[N]<T> = adds all dimensions of the tensors
    Tensor[N]<T> = Tensor[N]<T> - Tensor[N]<T> = subtracts all dimensions of the tensors
    Tensor[N]<T> = Tensor[N]<T> * Tensor[N]<T> = multiplies all dimensions of the tensors
    Tensor[N]<T> = Tensor[N]<T> / Tensor[N]<T> = divides all dimensions of the tensors
    Tensor[N]<T> = Tensor[N]<T> + T = adds the constant to all dimensions of the tensor
    Tensor[N]<T> = Tensor[N]<T> - T = subtracts the constant from all dimensions of the tensor
    Tensor[N]<T> = Tensor[N]<T> * T = multiplies all dimensions of the tensor with the constant
    Tensor[N]<T> = Tensor[N]<T> / T = divides all dimensions of the tensor by the constant

Map<K Comparable, V any>
    


Pointer<T any>
    Typesafe pointer operators:
    Pointer<T> = &T = constructs a Pointer<T> from a T
    &T is a preprocessor macro defined as follows:
        &T = Pointer<T>(&&T)
    T = *Pointer<T> = derefecrences a Pointer<T> into a T

Direct (unsafe) memory operations:
    let unsafe_ptr := Pointer<uint64>(0x3cff) = initializes a typed pointer directly from a virtual memory address
    let mem_addr: uint64 = &&T = gets the numeric memory address of T

Modules:
a source file inherits the module name of its parent directory
all files in a directory are joined together internally
cyclic imports are allowed

main.gs
/module1/a.gs
/module1/b.gs
/module1/c.gs
/module2/c.gs
/module2/x.gs
/module3/submodule1/a.gs

the main file must be marked by beginning with
application MyApp

to import a package use the import statement:
import "loc/module1"
import "loc/<module name>"
Means import this this module directly using its default name

import "loc/module1" as mymodule
import "loc/<module name>" as <module alias>
Means import this this module directly using the name alias mymodule

import "loc/module1/submodule1/"
import "loc/<module name>"
Means import this submodule directly using its default name

external remotemodule from "http://someremotething.com/a@version=^1.0.0@branch=master"
external <alias> from "<source url>"
Means declare the module remotemodule importable, referring to the folder at the url. folder will be git cloned from the git remote
the optional version and branch tags will be parsed from the url

external modules are analyzed when they are added at compile time. If an external module should use external dependencies, those must be listed
in its application file. The import analyzer will build a dependency graph dynamically.

import "ext/module1"
import "<standard module name>"
Means import module1 from the standard library. ext/ modules come from the an external source

import "std/module1"
import "<standard module name>"
Means import module1 from the standard library. std/ modules come from the standard library

Builtin functions:
print(t: string)
prints to stdout